import bcrypt
from app.utils.jwt_util import generate_refresh_token, generate_access_token
from app.repositories.user_repository import UserRepository
from app.entities.user import User

class AuthService:
    def __init__(self):
        self.user_repository = UserRepository()

    def login(self, username, password):
        user = UserRepository.get_user_by_username(self, username)
        print(f"Login attempt for username: {user}")
        if not user or not bcrypt.checkpw(password.encode('utf-8'), user.password.encode('utf-8')):
            print(f"Login failed for username: {username}")
            return None

        access_token = generate_access_token(identity=user.username)
        refresh_token = generate_refresh_token(identity=user.username)

        print(f"Login successful for username: {username}")
        return access_token, refresh_token

    def register_user(self, name, username, email, phone, password, profile_photo=None):
        # Hash the password
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

        # Create a new User entity
        user_entity = User(
            user_id=None,  # This will be generated by the database
            name=name,
            username=username,
            email=email,
            phone=phone,
            password=hashed_password,
            profile_photo=profile_photo
        )

        # Save the user using the repository
        self.user_repository.save_user(user_entity)

        return user_entity